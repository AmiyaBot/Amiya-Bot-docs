import{_ as s,o as a,c as o,S as n}from"./chunks/framework.2ada2e54.js";const D=JSON.parse('{"title":"发送 HTTP 请求","description":"","frontmatter":{},"headers":[],"relativePath":"develop/tools/httpRequests.md","filePath":"develop/tools/httpRequests.md","lastUpdated":1752828192000}'),l={name:"develop/tools/httpRequests.md"};function e(p,t,r,d,c,y){return a(),o("div",null,t[0]||(t[0]=[n(`<h1 id="发送-http-请求" tabindex="-1">发送 HTTP 请求 <a class="header-anchor" href="#发送-http-请求" aria-label="Permalink to &quot;发送 HTTP 请求&quot;">​</a></h1><p>AmiyaBot 内置了异步的 HTTP 请求工具，基于 <a href="https://github.com/aio-libs/aiohttp" target="_blank" rel="noreferrer">aiohttp</a>。</p><div class="danger custom-block"><p class="custom-block-title">不推荐使用 requests 库<br></p><p>requests 是著名的 python http 请求工具库。但其请求方法均为<strong>同步</strong>的。AmiyaBot 为异步程序，使用同步请求将会阻塞主线程运行。</p><p>如果是<strong>无法干预的</strong>同步请求行为，可以使用内置的线程池方法更变为异步。详见 <a href="/develop/advanced/blockingIO.html">处理阻塞操作</a>。</p></div><p>直接引入 <code>http_requests</code> 实例和 <code>download_async</code> 方法即可使用。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> amiyabot</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">network</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">httpRequests </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> http_requests</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> amiyabot</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">network</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">download </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> download_async</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post_form</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post_upload</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">request</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">download_async</span><span style="color:#89DDFF;">()</span></span></code></pre></div><h2 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h2><p><code>http_requests</code> 的请求均返回<strong>字符串</strong>的请求结果（如果请求失败会返回空字符串），但有些不一样。这个 “字符串” 可以使用一些额外的属性。</p><h3 id="json" tabindex="-1">json <a class="header-anchor" href="#json" aria-label="Permalink to &quot;json&quot;">​</a></h3><p>调用这个属性会尝试返回 json 格式化的 <code>responseText</code> 内容。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">res </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/interface</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    data </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">json</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span></code></pre></div><h3 id="response" tabindex="-1">response <a class="header-anchor" href="#response" aria-label="Permalink to &quot;response&quot;">​</a></h3><p>调用这个属性可以返回请求结果（<code>aiohttp.ClientResponse</code> 的实例），可以获取请求的状态码和其他信息。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">res </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/interface</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">status </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">response</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">status</span></span></code></pre></div><h3 id="error" tabindex="-1">error <a class="header-anchor" href="#error" aria-label="Permalink to &quot;error&quot;">​</a></h3><p>如果请求失败，可以调用这个属性获取异常（<code>Exception</code> 的实例）。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">res </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/interface</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">error </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">error</span></span></code></pre></div><h2 id="get-请求" tabindex="-1">GET 请求 <a class="header-anchor" href="#get-请求" aria-label="Permalink to &quot;GET 请求&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()</span></span></code></pre></div><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>interface</td><td>str</td><td>请求地址</td><td></td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L316" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table><h2 id="post-请求" tabindex="-1">POST 请求 <a class="header-anchor" href="#post-请求" aria-label="Permalink to &quot;POST 请求&quot;">​</a></h2><p>post 方法默认在请求头内添加 <code>&#39;Content-Type&#39;: &#39;application/json&#39;</code>，请求体<strong>仅接受字典或列表类型数据</strong>。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#89DDFF;">()</span></span></code></pre></div><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>interface</td><td>str</td><td>请求地址</td><td></td></tr><tr><td>payload</td><td>dict, list</td><td>请求体</td><td></td></tr><tr><td>headers</td><td>dict</td><td>追加的请求头</td><td></td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L316" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table><h2 id="form-表单请求" tabindex="-1">FORM 表单请求 <a class="header-anchor" href="#form-表单请求" aria-label="Permalink to &quot;FORM 表单请求&quot;">​</a></h2><p>post_form 方法类似 post 方法。唯一不同的是请求体仅接受<strong>字典类型</strong>，发送请求时会被构建为 form data 表单数据。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post_form</span><span style="color:#89DDFF;">()</span></span></code></pre></div><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>interface</td><td>str</td><td>请求地址</td><td></td></tr><tr><td>payload</td><td>dict</td><td>请求体</td><td></td></tr><tr><td>headers</td><td>dict</td><td>追加的请求头</td><td></td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L316" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table><h2 id="文件上传" tabindex="-1">文件上传 <a class="header-anchor" href="#文件上传" aria-label="Permalink to &quot;文件上传&quot;">​</a></h2><p>文件上传 post_upload 方法以 form 表单的方式提交文件。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post_upload</span><span style="color:#89DDFF;">()</span></span></code></pre></div><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>interface</td><td>str</td><td>请求地址</td><td></td></tr><tr><td>file</td><td>bytes</td><td>文件 bytes</td><td></td></tr><tr><td>filename</td><td>str</td><td>文件名</td><td>file</td></tr><tr><td>file_field</td><td>str</td><td>表单数据中存放文件的字段名</td><td>file</td></tr><tr><td>payload</td><td>dict</td><td>请求体</td><td></td></tr><tr><td>headers</td><td>dict</td><td>追加的请求头</td><td></td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L316" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table><h2 id="自定义请求" tabindex="-1">自定义请求 <a class="header-anchor" href="#自定义请求" aria-label="Permalink to &quot;自定义请求&quot;">​</a></h2><p>如果需要发送更多类型的请求，如 <code>PUT</code>、<code>PATCH</code>、<code>DELETE</code> 等，或需要自定义更多的请求场景，可使用 request 方法。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> http_requests</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">request</span><span style="color:#89DDFF;">()</span></span></code></pre></div><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>str</td><td>请求地址</td><td></td></tr><tr><td>method</td><td>dict</td><td>请求方法</td><td>post</td></tr><tr><td>request_name</td><td>dict</td><td>请求过程的 LOG 标识</td><td></td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L316" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table><h2 id="下载文件" tabindex="-1">下载文件 <a class="header-anchor" href="#下载文件" aria-label="Permalink to &quot;下载文件&quot;">​</a></h2><p>download_async 是提供的异步下载文件的方法。默认返回 bytes 类型的数据。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">file</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">bytes</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">download_async</span><span style="color:#89DDFF;">()</span></span></code></pre></div><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>str</td><td>请求地址</td><td></td></tr><tr><td>headers</td><td>dict</td><td>追加的请求头</td><td></td></tr><tr><td>stringify</td><td>bool</td><td>是否返回字符串结果</td><td>False</td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L316" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table><h3 id="同步下载" tabindex="-1">同步下载 <a class="header-anchor" href="#同步下载" aria-label="Permalink to &quot;同步下载&quot;">​</a></h3><p>如某些场景需要使用同步下载，可使用同模块中的 download_sync 方法。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> amiyabot</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">network</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">download </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> download_sync</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">file</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">bytes</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">download_sync</span><span style="color:#89DDFF;">()</span></span></code></pre></div><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>str</td><td>请求地址</td><td></td></tr><tr><td>headers</td><td>dict</td><td>追加的请求头</td><td></td></tr><tr><td>stringify</td><td>bool</td><td>是否返回字符串结果</td><td>False</td></tr><tr><td>progress</td><td>bool</td><td>是否显示进度条</td><td>False</td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/psf/requests/blob/main/requests/api.py#L14" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table>`,43)]))}const F=s(l,[["render",e]]);export{D as __pageData,F as default};
