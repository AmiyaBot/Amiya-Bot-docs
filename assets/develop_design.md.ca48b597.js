import{_ as a,o as t,c as o,S as r}from"./chunks/framework.2ada2e54.js";const s="/assets/account.d1c96da5.svg",d="/assets/handlerFactory.f4bc05d9.svg",n="/assets/adapter.b252f80a.svg",c="/assets/centerProcessor.46a8ea9e.svg",f=JSON.parse('{"title":"设计","description":"","frontmatter":{},"headers":[],"relativePath":"develop/design.md","filePath":"develop/design.md","lastUpdated":1752828192000}'),i={name:"develop/design.md"};function l(p,e,h,m,u,g){return t(),o("div",null,e[0]||(e[0]=[r('<h1 id="设计" tabindex="-1">设计 <a class="header-anchor" href="#设计" aria-label="Permalink to &quot;设计&quot;">​</a></h1><p>AmiyaBot 是一款 QQ 机器人框架，基于异步I/O构建，并提供了装饰器模式（Decorator Pattern）以及插件化动态导入（Dynamic import）的编程方式。 内置多种适配器兼容不同的服务来源以及丰富的消息构建类型，旨在帮助你更高效地编写业务逻辑，实现你的创意。</p><p>框架结构可分为<code>业务模块</code>，<code>通讯模块</code>，<code>数据处理模块</code>，<code>存储模块</code>和<code>运转中心</code>五个组成部分。它们独立运作，并在彼此之间相互提供数据。</p><h2 id="业务模块" tabindex="-1">业务模块 <a class="header-anchor" href="#业务模块" aria-label="Permalink to &quot;业务模块&quot;">​</a></h2><p>业务模块由<code>插件（Plugin）</code>、<code>账号实例（AmiyaBot）</code>和<code>多账号实例（MultipleAccounts）</code> 组成。它们一般会被组织成层层嵌套的树状结构。账号实例和多账号实例是同质的，它们均可以被运转中心（CenterProcessor）直接访问，运转中心无法访问插件。</p><p>运转中心在访问这些对象时，顶级对象会组合所有子级对象的属性提供给运转中心。</p><img src="'+s+'" style="width:100%;" alt=""><h3 id="插件设计" tabindex="-1">插件设计 <a class="header-anchor" href="#插件设计" aria-label="Permalink to &quot;插件设计&quot;">​</a></h3><p>实现上述模式的思路来源于 Vue 的 <a href="https://cn.vuejs.org/guide/essentials/component-basics.html" target="_blank" rel="noreferrer">组件设计</a> ，所以在代码层面，插件与账号实例都属于“组件”，理论上账号实例之间也能互相嵌套。但在设计时加入了限制，防止这种关系的出现。</p><h3 id="业务设计" tabindex="-1">业务设计 <a class="header-anchor" href="#业务设计" aria-label="Permalink to &quot;业务设计&quot;">​</a></h3><p>业务模块通过各种装饰器来定义业务逻辑以及规则。这些装饰器都来源于它们继承的工厂对象（BotHandlerFactory），工厂对象是业务模块与运转中心的桥梁，业务函数会被工厂对象收集并封装，最终提供给运转中心调用。</p><p><strong>账号实例图解</strong></p><img src="'+d+'" style="width:100%;" alt=""><h2 id="通讯与数据处理模块" tabindex="-1">通讯与数据处理模块 <a class="header-anchor" href="#通讯与数据处理模块" aria-label="Permalink to &quot;通讯与数据处理模块&quot;">​</a></h2><p>通讯模块主要形式为<code>适配器（Adapter）</code>，用于对接由机器人运营方提供的服务。</p><h3 id="适配器" tabindex="-1">适配器 <a class="header-anchor" href="#适配器" aria-label="Permalink to &quot;适配器&quot;">​</a></h3><p>账号实例里面有一个重要参数：adapter，它指定了通讯模块的运行方式（选择适配器）以适配不同运营方的连接协议。</p><img src="'+n+'" style="width:100%;" alt=""><p>通讯模块负责解决对接收和发送的数据进行解包与封包，所以它与数据处理模块紧密相连。适配器必须为数据处理模块提供统一的接口，在与不同的运营方服务通讯过程中，运转中心获取到的源数据格式都必须是一致的。而接收到运转中心需要发出的数据时，适配器需要把数据封包为运营方协定的格式，完成发送。</p><p>账号实例也可以脱离运转中心的调控随时调用适配器与运营方服务通讯，完成一些特殊情况下的操作。</p><h2 id="运转中心" tabindex="-1">运转中心 <a class="header-anchor" href="#运转中心" aria-label="Permalink to &quot;运转中心&quot;">​</a></h2><p>运转中心包含<strong>事件处理</strong>，<strong>消息处理</strong>、<strong>分配器</strong>和<strong>日志</strong> 等各种将所有模块相连的处理单元，是业务层的主要调度模块。在接收到由适配器传入的消息后，运转中心会将消息归类并分发到不同的处理模块。</p><h3 id="消息处理" tabindex="-1">消息处理 <a class="header-anchor" href="#消息处理" aria-label="Permalink to &quot;消息处理&quot;">​</a></h3><p>分配到消息处理的数据，将会对数据和业务模块收集的消息响应器（on_message）进行匹配，并将匹配成功的消息响应器按优先级排序，选取最高优先级的执行。</p><p>消息响应器的执行结果会经由运转中心返回到适配器，进行封包后发送。</p><img src="'+c+'" style="width:100%;" alt=""><p>这个过程在运转中心内称为“生命周期”，工厂对象可以介入这些周期影响消息处理的分配与执行结果。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>存储模块以及运转中心的日志等模块，在本文将忽略不谈。这些模块依赖第三方库或 Python 的标准库，本框架仅对其做了适度的封装。</p>',29)]))}const _=a(i,[["render",l]]);export{f as __pageData,_ as default};
