import{_ as a,o as n,c as l,S as p}from"./chunks/framework.2ada2e54.js";const D=JSON.parse('{"title":"加载插件","description":"","frontmatter":{},"headers":[],"relativePath":"develop/advanced/loadPlugins.md","filePath":"develop/advanced/loadPlugins.md","lastUpdated":1752828192000}'),o={name:"develop/advanced/loadPlugins.md"};function t(e,s,c,r,i,y){return n(),l("div",null,s[0]||(s[0]=[p(`<h1 id="加载插件" tabindex="-1">加载插件 <a class="header-anchor" href="#加载插件" aria-label="Permalink to &quot;加载插件&quot;">​</a></h1><p>本篇将会讲解 AmiyaBot 插件的工作原理以及插件导入和卸载的方法。</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>插件设计的目的是因为 <a href="https://github.com/AmiyaBot/Amiya-Bot" target="_blank" rel="noreferrer">兔兔-v6</a> 通常会以可执行文件的形式发布，将一些功能模块分散为插件的形式，更有助于用户灵活的管理自己的机器人功能，以及对单独的功能进行热更新。</p><p>AmiyaBot 的插件加载得益于 Python 作为脚本语言的一个优点：<strong>动态执行代码</strong>，配合标准库的 <code>importlib</code> 和 <code>zipimport</code>，就能够很好的完成外部代码的导入与执行，理解这一原理，需要你熟悉 Python 的导入机制。而“动态执行代码”，如果你不是第一次接触脚本语言，想必你对其应有了一定的了解。</p><h2 id="开发插件" tabindex="-1">开发插件 <a class="header-anchor" href="#开发插件" aria-label="Permalink to &quot;开发插件&quot;">​</a></h2><p>开发插件可以参考主项目的 <a href="/develop/plugin/create.html">插件开发</a> 形式，但本篇并不是作为主项目的引导文档。在主项目里，插件是一个 zip 压缩包，在加载时解压并导入，完成代码的动态执行。</p><p>但在本框架的设计里，插件还能有另外几种导入方式。</p><h2 id="导入插件实例" tabindex="-1">导入插件实例 <a class="header-anchor" href="#导入插件实例" aria-label="Permalink to &quot;导入插件实例&quot;">​</a></h2><p>插件实例可以直接在你的程序里定义，这是正常的做法，事实上这对你的功能管理（如动态增加或软删除功能时）有很大帮助。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> amiyabot </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> AmiyaBot</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> PluginInstance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">plugin </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">PluginInstance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我的插件</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">plugin_id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">description</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我的第一个插件</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">plugin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on_message</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">keywords</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">_</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Message</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Chain</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">text</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;hello, </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nickname</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">bot </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">AmiyaBot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;"># or MultipleAccounts</span></span>
<span class="line"><span style="color:#BABED8;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">install_plugin</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">plugin</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>此时，该 AmiyaBot 实例便拥有了这个插件定义的所有消息响应、事件或定时任务等功能。</p><h2 id="导入-python-文件" tabindex="-1">导入 Python 文件 <a class="header-anchor" href="#导入-python-文件" aria-label="Permalink to &quot;导入 Python 文件&quot;">​</a></h2><p>这是写有插件注册代码的一个 Python 文件 <code>myPlugin.py</code></p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> amiyabot </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> PluginInstance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># bot 变量名是必须的，详见插件开发文档。</span></span>
<span class="line"><span style="color:#BABED8;">bot </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">PluginInstance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我的插件</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">plugin_id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">description</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我的第一个插件</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on_message</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">keywords</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">_</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Message</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Chain</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">text</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;hello, </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">nickname</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>以 Python 文件导入这个插件</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">install_plugin</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myPlugin.py</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 相当于执行了代码：import myPlugin</span></span></code></pre></div><p>单文件插件是最简单的开发方式，这是在不考虑文件大小、静态资源或变量污染的前提下。</p><h2 id="导入-python-package-目录" tabindex="-1">导入 Python Package 目录 <a class="header-anchor" href="#导入-python-package-目录" aria-label="Permalink to &quot;导入 Python Package 目录&quot;">​</a></h2><p>如果一个插件的逻辑非常复杂，它可能会是以 Package 目录的形式存在。此时插件的目录应如下所示。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">myPlugin</span></span>
<span class="line"><span style="color:#babed8;">├── __init__.py</span></span>
<span class="line"><span style="color:#babed8;">├── a.py</span></span>
<span class="line"><span style="color:#babed8;">├── b.py</span></span>
<span class="line"><span style="color:#babed8;">│   ...</span></span>
<span class="line"><span style="color:#babed8;">...</span></span></code></pre></div><p>以目录导入这个插件</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">install_plugin</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myPlugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># 相当于执行了代码：import myPlugin</span></span></code></pre></div><h2 id="导入-zip-压缩包" tabindex="-1">导入 zip 压缩包 <a class="header-anchor" href="#导入-zip-压缩包" aria-label="Permalink to &quot;导入 zip 压缩包&quot;">​</a></h2><p>如果一些插件甚至带有静态资源，虽然 Package 目录同样能实现，但为了方便传播，它可能会是一个 zip 压缩文件。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">myPlugin.zip</span></span>
<span class="line"><span style="color:#babed8;">├── assetsFolder</span></span>
<span class="line"><span style="color:#babed8;">├── config.yaml</span></span>
<span class="line"><span style="color:#babed8;">├── __init__.py</span></span>
<span class="line"><span style="color:#babed8;">├── a.py</span></span>
<span class="line"><span style="color:#babed8;">├── b.py</span></span>
<span class="line"><span style="color:#babed8;">│   ...</span></span>
<span class="line"><span style="color:#babed8;">...</span></span></code></pre></div><p>以 zip 导入这个插件</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">install_plugin</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myPlugin.zip</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>这里将会发生另一种情况，在 zip 导入时，并不是像上述两种方式一样相当于执行<br><code>import myPlugin</code> 语句。而是通过标准库 <code>zipimport</code>，读取了此压缩包，并执行 <code>__init__.py</code>。</p><p>这有点抽象，你可以理解为使用了 python 命令执行了 <code>__init__.py</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">python</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">__init__.py</span></span></code></pre></div><p>那么当 <code>__init__.py</code> 在相对导入其目录下的模块时，由于它属于顶级模块，插件将会 <span style="color:red;">加载失败</span> 并抛出如下异常。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">main </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> bot</span></span></code></pre></div><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">plugin install error: Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#babed8;">  File &quot;F:\\Project\\Amiya-Bot-core\\amiyabot\\log\\manager.py&quot;, line 116, in sync_catch</span></span>
<span class="line"><span style="color:#babed8;">    yield</span></span>
<span class="line"><span style="color:#babed8;">  File &quot;F:\\Project\\Amiya-Bot-core\\amiyabot\\handler\\__init__.py&quot;, line 287, in install_plugin</span></span>
<span class="line"><span style="color:#babed8;">    module = zipimport.zipimporter(plugin).load_module(&#39;__init__&#39;)</span></span>
<span class="line"><span style="color:#babed8;">  File &quot;&lt;frozen zipimport&gt;&quot;, line 259, in load_module</span></span>
<span class="line"><span style="color:#babed8;">  File &quot;plugins\\myPlugin.zip\\__init__.py&quot;, line 1, in &lt;module&gt;</span></span>
<span class="line"><span style="color:#babed8;">    from .main import bot</span></span>
<span class="line"><span style="color:#babed8;">ImportError: attempted relative import with no known parent package</span></span></code></pre></div><p><strong>install_plugin</strong> 里提供了参数解决这一问题。先看看这个方法的参数列表。</p><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>plugin</td><td>str, PluginInstance</td><td>插件（文件、package 的路径或 PluginInstance 实例）</td><td></td></tr><tr><td>extract_plugin</td><td>bool</td><td>是否解压插件</td><td>False</td></tr><tr><td>extract_plugin_dest</td><td>str</td><td>插件解压后的目录名（默认为 zip 文件名）</td><td></td></tr></tbody></table><p>解决上述问题，我们只需要添加参数 <code>extract_plugin=True</code>，将 zip 导入转换为 Package 目录导入。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">install_plugin</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myPlugin.zip</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">extract_plugin</span><span style="color:#89DDFF;">=True)</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">注意<br></p><p>每次执行加载时都会解压一次全部文件，但如果路径已存在，将不会覆盖原文件。如果插件有一些原文件修改的更新，应注意这一特性。</p></div><h2 id="卸载插件" tabindex="-1">卸载插件 <a class="header-anchor" href="#卸载插件" aria-label="Permalink to &quot;卸载插件&quot;">​</a></h2><p>插件实例都有一个唯一 ID（属性 plugin_id），通过这个 ID 可以卸载指定的插件。</p><p><strong>uninstall_plugin</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>plugin_id</td><td>str</td><td>插件 ID</td><td></td></tr><tr><td>remove</td><td>bool</td><td>是否删除插件的原文件</td><td>False</td></tr></tbody></table><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">uninstall_plugin</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div>`,44)]))}const d=a(o,[["render",t]]);export{D as __pageData,d as default};
