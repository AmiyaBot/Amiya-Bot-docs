import{_ as a,o as n,c as l,S as e}from"./chunks/framework.2ada2e54.js";const o="/assets/lifeCycle.3a881ce1.svg",B=JSON.parse('{"title":"生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"develop/advanced/lifeCycle.md","filePath":"develop/advanced/lifeCycle.md","lastUpdated":1752828192000}'),p={name:"develop/advanced/lifeCycle.md"};function t(c,s,r,y,D,i){return n(),l("div",null,s[0]||(s[0]=[e('<h1 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h1><p>AmiyaBot 接收的消息和事件，都会历经一个完整的生命周期。你可以介入这些周期来对业务进行进一步的调整。</p><h2 id="消息生命周期" tabindex="-1">消息生命周期 <a class="header-anchor" href="#消息生命周期" aria-label="Permalink to &quot;消息生命周期&quot;">​</a></h2><p>在接收消息到回复发送完毕，总共会经过至少五个周期，如下图所示，紫色的节点就是可以介入的周期。</p><p>如果消息响应里存在等待事件，那么周期将会延长，再次从消息接收开始，直至等待事件结束后继续向下执行。</p><img src="'+o+`" style="width:100%;" alt=""><p>通过 AmiyaBot 对象或 PluginInstance 对象注册周期钩子函数。</p><blockquote><p>所有钩子均可以同时存在多个，按加载顺序逐个调用。</p></blockquote><h3 id="message-created" tabindex="-1">message_created <a class="header-anchor" href="#message-created" aria-label="Permalink to &quot;message_created&quot;">​</a></h3><p>消息创建完毕阶段，可以在此阶段修改 Message 对象并返回。存在多个此钩子时，按加载顺序逐个调用，参数接受的 Message 对象受上一个函数的执行结果影响。</p><p>该钩子函数可返回三种结果：</p><ul><li><strong>None</strong>：对后续不产生影响</li><li><strong>Message</strong>：修改 Message 对象，将影响后续所有周期进程的参数</li><li><strong>False</strong>：布尔值仅可返回 False，将结束生命周期（包括此周期后续的钩子函数）</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">message_created</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">_</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Message</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> BotAdapterProtocol</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> ...</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        data</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">text</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> ...</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> data</span></span></code></pre></div><h3 id="message-before-waiter-set" tabindex="-1">message_before_waiter_set <a class="header-anchor" href="#message-before-waiter-set" aria-label="Permalink to &quot;message_before_waiter_set&quot;">​</a></h3><p>当存在等待事件且消息分配器无返回或等待事件属于强制等待类型时，在进入等待事件前执行此钩子。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> amiyabot </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Waiter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">message_before_waiter_set</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">_</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Message</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">waiter</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Waiter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> BotAdapterProtocol</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">    ...</span></span></code></pre></div><h3 id="message-before-handle" tabindex="-1">message_before_handle <a class="header-anchor" href="#message-before-handle" aria-label="Permalink to &quot;message_before_handle&quot;">​</a></h3><p>当消息分配器有返回，在执行消息响应器前执行此钩子。存在多个此钩子时，按加载顺序逐个调用。全部执行完成后当有其中一个返回 False，则不往下继续执行并结束生命周期。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">message_before_handle</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">_</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Message</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">factory_name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> BotAdapterProtocol</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> ...</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">True</span></span></code></pre></div><h3 id="message-before-send" tabindex="-1">message_before_send <a class="header-anchor" href="#message-before-send" aria-label="Permalink to &quot;message_before_send&quot;">​</a></h3><p>当消息响应器执行完毕且存在返回时，在发送其返回前执行此钩子。可以在此阶段修改 Chain 对象并返回。存在多个此钩子时，按加载顺序逐个调用，参数接受的 Chain 对象受上一个函数的执行结果影响。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">message_before_send</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">_</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">chain</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Chain</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">factory_name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> BotAdapterProtocol</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">    ...</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> chain</span></span></code></pre></div><h3 id="message-after-send" tabindex="-1">message_after_send <a class="header-anchor" href="#message-after-send" aria-label="Permalink to &quot;message_after_send&quot;">​</a></h3><p>当消息响应器执行完毕且存在返回时，在发送其返回结束后执行此钩子。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">message_after_send</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">_</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">chain</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Chain</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">factory_name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> BotAdapterProtocol</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">    ...</span></span></code></pre></div><h3 id="message-after-handle" tabindex="-1">message_after_handle <a class="header-anchor" href="#message-after-handle" aria-label="Permalink to &quot;message_after_handle&quot;">​</a></h3><p>当消息响应器执行完毕（无论有没有返回）后执行此钩子。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">message_after_handle</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">_</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">chain</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Optional</span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">Chain</span><span style="color:#89DDFF;">],</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">factory_name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> BotAdapterProtocol</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">    ...</span></span></code></pre></div><h2 id="事件生命周期" tabindex="-1">事件生命周期 <a class="header-anchor" href="#事件生命周期" aria-label="Permalink to &quot;事件生命周期&quot;">​</a></h2><p>目前事件生命周期只有一个。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">event_created</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">def</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">_</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> EventType</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">instance</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> BotAdapterProtocol</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#BABED8;">    ...</span></span></code></pre></div>`,31)]))}const A=a(p,[["render",t]]);export{B as __pageData,A as default};
