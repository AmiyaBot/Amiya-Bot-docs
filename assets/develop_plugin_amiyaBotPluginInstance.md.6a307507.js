import{_ as a}from"./chunks/plugin3.7807f651.js";import{_ as n,o as t,c as l,S as o}from"./chunks/framework.2ada2e54.js";const h=JSON.parse('{"title":"AmiyaBotPluginInstance","description":"","frontmatter":{},"headers":[],"relativePath":"develop/plugin/amiyaBotPluginInstance.md","filePath":"develop/plugin/amiyaBotPluginInstance.md","lastUpdated":1752828192000}'),e={name:"develop/plugin/amiyaBotPluginInstance.md"};function p(c,s,r,i,d,y){return t(),l("div",null,s[0]||(s[0]=[o(`<h1 id="amiyabotplugininstance" tabindex="-1">AmiyaBotPluginInstance <a class="header-anchor" href="#amiyabotplugininstance" aria-label="Permalink to &quot;AmiyaBotPluginInstance&quot;">​</a></h1><p>AmiyaBotPluginInstance 是 <a href="/guide/deploy/">兔兔-v6</a> 项目中的对插件类 PluginInstance 的扩展实现。使用该类创建插件时，能够获得更多的能力。</p><p>在 demo 项目里导入 <code>AmiyaBotPluginInstance</code> 创建插件。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> core </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> AmiyaBotPluginInstance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">bot </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">AmiyaBotPluginInstance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我的插件</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">plugin_id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">description</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我的第一个插件</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">channel_config_default</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">channel_config_schema</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">global_config_default</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">global_config_schema</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">deprecated_config_delete_days</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span></code></pre></div><p>AmiyaBotPluginInstance 继承了 PluginInstance，并且拥有以下新参数和方法</p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>instruction</td><td>str</td><td><a href="/develop/plugin/addDoc.html#添加使用指引文档">使用指引文档</a></td><td>None</td></tr><tr><td>requirements</td><td>List[Requirement]</td><td><a href="/develop/plugin/amiyaBotPluginInstance.html#添加插件依赖">插件依赖</a></td><td>None</td></tr><tr><td>channel_config_default</td><td>str</td><td>频道级别配置默认值</td><td>None</td></tr><tr><td>channel_config_schema</td><td>str</td><td>频道级别配置表单的 JsonSchema</td><td>None</td></tr><tr><td>global_config_default</td><td>str</td><td>全局级别配置默认值</td><td>None</td></tr><tr><td>global_config_schema</td><td>str</td><td>全局级别配置表单的 JsonSchema</td><td>None</td></tr><tr><td>deprecated_config_delete_days</td><td>int</td><td>旧配置项失效的天数</td><td>7</td></tr></tbody></table><ul><li>默认值和 JsonSchema 传入的值均为字符串，可以是 JSON 字符串或 <code>json</code> 文件路径。（默认值允许使用 <code>yaml</code> 文件路径）</li><li>在控制台中点击 <code>重置为默认</code> 时会使用默认值的 JSON 数据覆盖，创建新配置项时使用默认值的 JSON 数据填充。</li><li>如果提供了 JsonSchema，将会使用 JsonSchema 创建表单界面，否则使用默认值的 JSON 数据。</li><li>如果提供了 JsonSchema，必须同时提供默认值数据。</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">plugin_dir </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dirname</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">__file__</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">bot </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">AmiyaBotPluginInstance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">channel_config_default</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">plugin_dir</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">/config.yaml&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">channel_config_schema</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">plugin_dir</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">/jsonSchema.json&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span></code></pre></div><h2 id="使用-jsonschema-对接控制台" tabindex="-1">使用 JsonSchema 对接控制台 <a class="header-anchor" href="#使用-jsonschema-对接控制台" aria-label="Permalink to &quot;使用 JsonSchema 对接控制台&quot;">​</a></h2><p>你可以通过<strong>对接控制台</strong>使用户能够使用控制台的界面管理你的插件。如下所示。</p><p><img src="`+a+`" alt=""></p><p>请阅读 <a href="/develop/plugin/jsonSchema.html">介绍文档</a> 了解如何编辑 jsonSchema.json 文件。</p><h3 id="get-config" tabindex="-1">get_config <a class="header-anchor" href="#get-config" aria-label="Permalink to &quot;get_config&quot;">​</a></h3><p>读取一个指定名称的配置项，如果没有频道级别的配置则返回同名全局配置，如果也没有全局配置，返回 <code>None</code>。传入 <code>channel_id=None</code> 可以直接读取全局配置。</p><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>config_name</td><td>str</td><td>配置名称</td><td></td></tr><tr><td>channel_id</td><td>str</td><td>频道ID</td><td>None</td></tr></tbody></table><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">config_value </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_config</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">channel_id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="set-config" tabindex="-1">set_config <a class="header-anchor" href="#set-config" aria-label="Permalink to &quot;set_config&quot;">​</a></h3><p>写入配置，传入 <code>channel_id=None</code> 可以强制指定写入全局配置。</p><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>config_name</td><td>str</td><td>配置名称</td><td></td></tr><tr><td>config_value</td><td>Any</td><td>配置值，仅支持可被 JSON 序列化的值类型</td><td></td></tr><tr><td>channel_id</td><td>str</td><td>频道ID</td><td>None</td></tr></tbody></table><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">bot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_config</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#BABED8;font-style:italic;">channel_id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p>插件加载时会进行下面的校验，校验不通过则会报错：</p><ul><li>提供了 schema 则必须提供对应的 default，反之则不必。</li><li>如果给出了 schema，则会用 schema 对提供的 default 进行校验。</li></ul><p>当有下列需求的时候，建议考虑提供 schema 文件：</p><ul><li>您想要使用下拉列表框。schema 中指定 enum 元素时，界面会生成下拉列表框。</li><li>您想要对用户的配置进行校验，如果不满足条件时输出提示。</li></ul><p>提供 <code>channel_config_default</code> 时，界面可以新建频道配置。</p><p>插件初次安装初次加载时，会将 <code>global_config_default</code> 作为默认全局配置写入数据库。<br> 该过程发生在构造函数，因此您如果需要对全局配置进行初始化操作，您需要在您的<strong>插件实例</strong>的构造函数，或者 install 函数中进行。</p><h2 id="添加插件依赖" tabindex="-1">添加插件依赖 <a class="header-anchor" href="#添加插件依赖" aria-label="Permalink to &quot;添加插件依赖&quot;">​</a></h2><p>当插件需要在别的插件的基础上运行，可在 requirements 参数内传入 <code>Requirement</code> 类的列表，当插件安装时，会从插件市场服务尝试寻找对应的插件依赖并一同安装。</p><p><strong>Requirement</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>plugin_id</td><td>str</td><td>插件ID</td><td></td></tr><tr><td>version</td><td>str</td><td>版本号（可选）</td><td>None</td></tr><tr><td>official</td><td>bool</td><td>是否官方插件</td><td>False</td></tr></tbody></table><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> core </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> AmiyaBotPluginInstance</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> Requirement</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">bot </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">AmiyaBotPluginInstance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#BABED8;font-style:italic;">requirements</span><span style="color:#89DDFF;">=[</span></span>
<span class="line"><span style="color:#82AAFF;">        Requirement</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">other-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        Requirement</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">other-plugin2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2.0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示<br></p><p>插件添加依赖后，仅当全部依赖安装成功后，才会进行自身的安装。</p></div>`,34)]))}const A=n(e,[["render",p]]);export{h as __pageData,A as default};
