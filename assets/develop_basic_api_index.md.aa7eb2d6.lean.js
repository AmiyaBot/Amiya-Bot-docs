import{_ as a,o as s,c as e,S as o}from"./chunks/framework.2ada2e54.js";const y=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"develop/basic/api/index.md","filePath":"develop/basic/api/index.md","lastUpdated":1752828192000}'),l={name:"develop/basic/api/index.md"};function n(p,t,r,d,i,c){return s(),e("div",null,t[0]||(t[0]=[o(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><p>API 是实现适配器部分基础逻辑的基础，你也可以调用 API 来进一步完成你的业务逻辑。</p><p><code>api</code> 属性位于 <code>AmiyaBot</code> 的 <code>instance</code> 属性下。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#BABED8;">bot </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">AmiyaBot</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> bot</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">api</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_me</span><span style="color:#89DDFF;">()</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">请注意<br></p><p>不用的适配器下，api 的方法不尽相同，在创作多平台机器人时，请注意可能产生的影响。</p></div><h2 id="引入-api-类以注解变量" tabindex="-1">引入 API 类以注解变量 <a class="header-anchor" href="#引入-api-类以注解变量" aria-label="Permalink to &quot;引入 API 类以注解变量&quot;">​</a></h2><p>我们强烈建议在使用不同的适配器时，引入相应的 API 类注解 api 属性。它们通常在适配器模块的 <code>api</code> 模块下。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> amiyabot</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">adapters</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">tencent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">qqGuild</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">api </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> QQGuildAPI</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># from amiyabot.adapters.cqhttp.api import CQHttpAPI</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># from amiyabot.adapters.kook.api import KOOKAPI</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">api</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> QQGuildAPI </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> bot</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">api</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> api</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_me</span><span style="color:#89DDFF;">()</span></span></code></pre></div><h2 id="共同的方法" tabindex="-1">共同的方法 <a class="header-anchor" href="#共同的方法" aria-label="Permalink to &quot;共同的方法&quot;">​</a></h2><p>api 实际上是调用了不同平台提供的接口。在不同平台下，调用接口的鉴权规则也不一样。所有适配器的 api 都存在以下三个方法，参数也是一样的。方法内部实现了不同平台的鉴权规则，你只需要直接调用接口即可。</p><h3 id="get" tabindex="-1">get <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get&quot;">​</a></h3><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>str</td><td>接口 url</td><td></td></tr><tr><td>params</td><td>Union[dict, None]</td><td>get 参数</td><td></td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L316" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table><h3 id="post" tabindex="-1">post <a class="header-anchor" href="#post" aria-label="Permalink to &quot;post&quot;">​</a></h3><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>str</td><td>接口 url</td><td></td></tr><tr><td>payload</td><td>Union[dict, None]</td><td>post 参数</td><td></td></tr><tr><td>is_form_data</td><td>bool</td><td>是否使用 form 表单提交（仅 QQ 频道拥有此参数）</td><td></td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L316" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table><h3 id="request" tabindex="-1">request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;request&quot;">​</a></h3><p>可以使用除 get、post 以外的一些 method 调用接口。</p><table><thead><tr><th>参数名</th><th>类型</th><th>释义</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>str</td><td>接口 url</td><td></td></tr><tr><td>method</td><td>str</td><td>请求 method</td><td></td></tr><tr><td>payload</td><td>Union[dict, None]</td><td>请求参数</td><td></td></tr><tr><td>**kwargs</td><td></td><td><a href="https://github.com/aio-libs/aiohttp/blob/master/aiohttp/client.py#L316" target="_blank" rel="noreferrer">request 参数</a></td><td></td></tr></tbody></table><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">res </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> bot</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">api</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/interface</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">为什么没有 headers 参数<br></p><p>方法内部实现了不同平台的鉴权规则，控制了 headers 的内容，你不需要手动控制。如果你希望自己实现请求，请使用 👉 <a href="/develop/tools/httpRequests.html">进阶指南 - HTTP 请求</a></p></div><h2 id="api-的返回" tabindex="-1">api 的返回 <a class="header-anchor" href="#api-的返回" aria-label="Permalink to &quot;api 的返回&quot;">​</a></h2><p>参考 <a href="/develop/tools/httpRequests.html#返回值">进阶指南 - HTTP 请求 - 返回值</a></p>`,21)]))}const F=a(l,[["render",n]]);export{y as __pageData,F as default};
